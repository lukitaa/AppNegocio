/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package negocio.Forms;

import com.mysql.jdbc.StringUtils;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import negocio.Controladoras.ControladoraProductos;
import negocio.Controladoras.ControladoraProveedores;
import negocio.Controladoras.StorageException;
import negocio.Entidades.Productos;
import negocio.Entidades.Proveedores;

/**
 *
 * @author usuario
 */
public class VistaStocks extends javax.swing.JDialog {

    Frame framePrincipal = null;
    /**
     * Creates new form VistaStocks
     */
    public VistaStocks(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setLocationRelativeTo(parent);
        initComponents();
        //Tener al Frame padre guardado para usar.
        framePrincipal = parent;
        //Seteo de los valores de las filas de la tabla en el centro
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        for (int i=0; i<form_tablaProductos.getColumnCount();i++){
            form_tablaProductos.setDefaultRenderer(form_tablaProductos.getColumnClass(i),renderer);
        }
        //Seteo de los valores de las cabezeras de la tabla en el centro
        DefaultTableCellRenderer renderer2 = (DefaultTableCellRenderer) form_tablaProductos.getTableHeader().getDefaultRenderer();
        renderer2.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        form_tablaProductos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        form_comboProductos = new javax.swing.JComboBox();
        form_modificarStockBoton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        form_tablaProductos.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        form_tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Producto", "Producto", "Proveedor", "Precio", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(form_tablaProductos);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Vista de los stocks de los productos");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel2.setText("Buscar producto:");

        form_comboProductos.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        form_comboProductos.setToolTipText("<html>\n\t<strong>Filtrar los stocks segun el producto elegido.</strong>\n</html>");
        form_comboProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                form_comboProductosActionPerformed(evt);
            }
        });

        form_modificarStockBoton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        form_modificarStockBoton.setText("Modificar el stock del producto seleccionado");
        form_modificarStockBoton.setToolTipText("<html> <strong> Modificar el stock del producto seleccionado. </strong></html>");
        form_modificarStockBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                form_modificarStockBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(form_comboProductos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(form_modificarStockBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(form_comboProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(form_modificarStockBoton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        refreshDataTable("Seleccionar...");
        completarCombo();
    }//GEN-LAST:event_formWindowGainedFocus

    //Evento que se ejecuta cuando se modifica el elemento seleccionado del combo
    private void form_comboProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_form_comboProductosActionPerformed
        refreshDataTable((String) form_comboProductos.getSelectedItem());
    }//GEN-LAST:event_form_comboProductosActionPerformed

    //Boton para mostrar un poput para pedir el nuevo stock del producto.
    private void form_modificarStockBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_form_modificarStockBotonActionPerformed
        //Mostrar un popup si todo esta bien, se actualiza y se guarda.
        if(form_tablaProductos.getSelectedRow() != -1){
            boolean done = false;
            while(!done){
                String nuevoStock = JOptionPane.showInputDialog("Ingrese el nuevo stock del producto. \nRecuerde que este debe ser del formato: 1KG500gr = 1500");
                //Checkear si el valor esta vacio o es null.
                if(nuevoStock.isEmpty() || nuevoStock == null){
                    JOptionPane.showMessageDialog(null,"El valor ingresado no puede estar vacio.","Valor ingresado incorrecto!",JOptionPane.WARNING_MESSAGE);
                }
                else{
                    //Checkear si se ingreso un Integer, caso contrario volver a mostrar el dialog.
                    try{
                        Integer.parseInt(nuevoStock);

                        //actualizar el stock.
                        Productos p = null;
                        if(form_tablaProductos.getSelectedRow() != -1){
                            try {
                                List<Productos> prod = null;
                                int filaElegida = form_tablaProductos.getSelectedRow();
                                prod = ControladoraProductos.getProductos();
                                p = prod.get(filaElegida);
                            } catch (StorageException ex) {
                                Logger.getLogger(VistaProveedores.class.getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(null,"Error al cargar la lista de productos..","Error cargar lista!",JOptionPane.WARNING_MESSAGE);
                            }
                        }
                        //Obtener los datos ingresados para modificar.
                        String nombreProd = p.getProducto();

                        int stock = Integer.valueOf(nuevoStock);
                        float precio = p.getPrecio();
                        //Obtener el proveedor elegido.
                        Proveedores prov = ControladoraProveedores.getProveedor(p.getIdProveedor());
                        try {
                            ControladoraProductos.updateProducto(p,nombreProd,stock,precio,prov);
                            JOptionPane.showMessageDialog(null,"El stock del producto se ha modificado correctamente.","Modificar producto",JOptionPane.PLAIN_MESSAGE);
                        } catch (StorageException ex) {
                            Logger.getLogger(ModificarProveedor.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null,"Error al modicar datos del producto.","Error form_modificarDatosActionPerformed Form/ModificarProducto!",JOptionPane.WARNING_MESSAGE);
                        }
                        done = true;
                    }catch (NumberFormatException | HeadlessException | StorageException e){
                        JOptionPane.showMessageDialog(null,"El valor ingresado no es un numero, por favor ingrese un valor correcto.","Valor ingresado incorrecto!",JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
        else
            JOptionPane.showMessageDialog(null,"Debes seleccionar el producto a modificar.","Alerta error",JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_form_modificarStockBotonActionPerformed

    //Funcion para actualizar los valores mostrados en la tabla.
    public void refreshDataTable(String producto){
        DefaultTableModel modelo = (DefaultTableModel) form_tablaProductos.getModel();        
        //Borrar los valores que ya existen, para no repetirlos en la tabla.
        if (modelo.getRowCount() > 0) {
            for (int i = modelo.getRowCount() - 1; i > -1; i--) {
                modelo.removeRow(i);
            }
        }
        List<Productos> prod = null;
        try {
            prod = ControladoraProductos.getProductos();
        } catch (StorageException ex) {
            Logger.getLogger(VistaProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Si no se selecciono ningun producto mostrar todos, caso contrario, mostrar el seleccionado.
        if(producto.equals("Seleccionar...")){
            //Volver a imprimir todos los datos en la tabla.
            agregarDataEnTabla(modelo,prod,true,"");
        }
        else{
            //Imprimir los datos del producto seleccionado en la tabla.
            agregarDataEnTabla(modelo,prod,false,producto);
        }
        form_tablaProductos.setModel(modelo);
    }

    //Funcion agregar los datos a data a agregar a la tabla.
    //PARAMETROS: - modelo: La tabla a modificar | - listaProd: La lista con todos los productos.
    //PARAMETROS: - todos: Hay que mostrar todos o el seleccionado? | - productoAMostrar: el nombre del producto a mostrar
    public void agregarDataEnTabla(DefaultTableModel modelo,List<Productos> listaProd, boolean todos,String productoAMostrar){
        String[] data = new String[5];
        if(todos){
            for(Productos p : listaProd){
                data[0] = p.getIdProducto().toString();
                data[1] = p.getProducto();
                try {
                        data[2] = ControladoraProveedores.getProveedor(p.getIdProveedor()).getProveedor();
                    } catch (StorageException ex) {
                        Logger.getLogger(VistaStocks.class.getName()).log(Level.SEVERE, null, ex);
                    }
                data[3] = "$" + String.valueOf(p.getPrecio());
                data[4] = String.valueOf(p.getStock());
                modelo.addRow(data);
            }
        }
        else{
            for(Productos p : listaProd){
                if(p.getProducto().equals(productoAMostrar)){
                    data[0] = p.getIdProducto().toString();
                    data[1] = p.getProducto();
                    try {
                        data[2] = ControladoraProveedores.getProveedor(p.getIdProveedor()).getProveedor();
                    } catch (StorageException ex) {
                        Logger.getLogger(VistaStocks.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    data[3] = String.valueOf(p.getStock());
                    data[4] = "$" + String.valueOf(p.getPrecio());
                    modelo.addRow(data);
                }
            }   
        }
    }
    
    //Funcion para rellenar el combobox de proveedores.
    public void completarCombo(){
        List<Productos> prod = null;
        form_comboProductos.addItem("Seleccionar...");
        try {
            prod = ControladoraProductos.getProductos();
            for(Productos p : prod){
                form_comboProductos.addItem(p.getProducto());
            }
        } catch (StorageException ex) {
            Logger.getLogger(ModificarProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaStocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaStocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaStocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaStocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VistaStocks dialog = new VistaStocks(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox form_comboProductos;
    private javax.swing.JButton form_modificarStockBoton;
    private javax.swing.JTable form_tablaProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
